}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
covcor
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"Insignificant",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5," ",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5," ",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
#install.packages("RColorBrewer")  # Needed to get color gradient
library(RColorBrewer)
cols = brewer.pal(11, "RdBu")   # goes from red to white to blue
pal = colorRampPalette(cols)
cor_colors = data.frame(correlation = seq(-1,1,0.01),
correlation_color = pal(201)[1:201])  # assigns a color for each r correlation value
cor_colors$correlation_color = as.character(cor_colors$correlation_color)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"not ",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
)
install.packages("RColorBrewer")  # Needed to get color gradient
library(RColorBrewer)
cols = brewer.pal(11, "RdBu")   # goes from red to white to blue
pal = colorRampPalette(cols)
cor_colors = data.frame(correlation = seq(-1,1,0.01),
correlation_color = pal(201)[1:201])  # assigns a color for each r correlation value
cor_colors$correlation_color = as.character(cor_colors$correlation_color)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"Insignificant",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
install.packages("RColorBrewer")
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"not",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"n.s.",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"n.s.",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value)),cex=2)
#text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"n.s.",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, digits=4)),cex=2)
#text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"n.s.",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format ="g", digits=3)),cex=2)
#text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"n.s.",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format ="g", digits=2)),cex=2)
#text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
panel.cor <- function(x, y, digits=2, cex.cor)
{
par(usr = c(0, 1, 0, 1))
u <- par('usr')
names(u) <- c("xleft", "xright", "ybottom", "ytop")
r <- cor(x, y,method="pearson",use="complete.obs")
test <- cor.test(x,y)
bgcolor = cor_colors[2+(-r+1)*100,2]    # converts correlation into a specific color
do.call(rect, c(col = bgcolor, as.list(u))) # colors the correlation box
if (test$p.value> 0.05){
text(0.5,0.5,"n.s.",cex=1.5)
} else{
text(0.5, 0.75, paste("r=",round(r,2)),cex=2.5) # prints correlatoin coefficient
text(.5, .25, paste("p=",formatC(test$p.value, format ="f", digits=4)),cex=2)
#text(.5, .25, paste("p=",formatC(test$p.value, format = "e", digits = 1)),cex=2)
abline(h = 0.5, lty = 2) # draws a line between correlatoin coefficient and p value
}
}
panel.smooth<-function (x, y, col = "black", bg = NA, pch = 19, cex = 1.2,
col.smooth = "blue", span = 2/3, iter = 3, ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(fit<-lm(y~x))
#  ok <- is.finite(x) & is.finite(y)
#  if (any(ok))
#    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter), lwd=2.5, col = col.smooth, ...)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(covariates,
lower.panel=panel.smooth,
upper.panel=panel.cor,
diag.panel=panel.hist,cex.labels=2)
fname <-"file:///C:/Users/asternin/Documents/PhDProject.git/Music and Memory/BehaviouralResults/LyricMod.csv"
#fname<-"~/Documents/Western/Academics/PhDProject.git/Music and Memory/fMRI analysis/CovData.csv"
data<-read.table(fname, sep=",",header=TRUE)
data
<<<<<<< HEAD
size(data)
length(data)
size(data$song)
length(data$song)
data$song
levels(data)
length(data$ID)
fname<-"~/Documents/Western/Academics/PhDProject.git/Music and Memory/fMRI analysis/CovData.csv"
data<-read.table(fname, sep=",",header=TRUE)
library("Hmisc")
covariates<-na.omit(data[c(3:8)])
covcor<-rcorr(as.matrix(covariates))
covcor
covdata = as.data.frame(data$fam_S1_ROI1)
covdata$group = factor(as.data.frame(data$song))
require(ggplot2)
ggplot(covdata, aes(x = group, y=covdata)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
covdata$group
covdata$group = factor(data$song)
covdata$group
require(ggplot2)
ggplot(covdata, aes(x = group, y=covdata)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
ggplot(covdata, aes(x = covdata$group, y=covdata)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
ggplot(covdata, aes(x = data$fam_S1_ROI1, y=covdata)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
gplot(covdata, aes(x=group , y=data$fam_S1_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
ggplot(covdata, aes(x=group , y=data$fam_S1_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
covdata.mod1=lm(data$fam_S1_ROI1 ~ group, data=covdata)
summary(covdata.mod1)
anova(covdata.mod1)
covdata = as.data.frame(data$fam_S1_ROI1,data$fam_S1_ROI2)
model=lm(fam_S1_ROI2 ~ song,data=data)
anova(model)
model=lm(fam_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(fam_S1_ROI3 ~ song,data=data)
anova(model)
model=lm(fam_S2_ROI1 ~ song,data=data)
anova(model)
model=lm(fam_S2_ROI2 ~ song,data=data)
anova(model)
#require(ggplot2)
ggplot(data, aes(x=song , y=fam_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
model=lm(lyror_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(lyror_S1_ROI2 ~ song,data=data)
anova(model)
model=lm(lyror_S1_ROI3 ~ song,data=data)
anova(model)
model=lm(lyror_S2_ROI1 ~ song,data=data)
anova(model)
model=lm(lyror_S2_ROI2 ~ song,data=data)
anova(model)
##for plotting ANOVA values - change y = ...
#require(ggplot2)
ggplot(data, aes(x=song , y=lyror_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
model=lm(melmem_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(melmem_S1_ROI2 ~ song,data=data)
anova(model)
model=lm(melmem_S2_ROI1 ~ song,data=data)
anova(model)
model=lm(melmem_S2_ROI2 ~ song,data=data)
anova(model)
##for plotting ANOVA values - change y = ...
#require(ggplot2)
ggplot(data, aes(x=song , y=melmem_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
## beatper ANOVA
model=lm(beatper_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(beatper_S1_ROI2 ~ song,data=data)
anova(model)
model=lm(beatper_S2_ROI1 ~ song,data=data)
anova(model)
model=lm(beatper_S2_ROI2 ~ song,data=data)
anova(model)
model=lm(beatper_S2_ROI3 ~ song,data=data)
anova(model)
model=lm(beatper_S2_ROI4 ~ song,data=data)
anova(model)
##for plotting ANOVA values - change y = ...
#require(ggplot2)
ggplot(data, aes(x=song , y=beatper_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
## Lyrmod ANOVA
model=lm(lyrmod_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(lyrmod_S1_ROI2 ~ song,data=data)
anova(model)
model=lm(lyrmod_S1_ROI3 ~ song,data=data)
anova(model)
model=lm(lyrmod_S1_ROI4 ~ song,data=data)
anova(model)
model=lm(lyrmod_S2_ROI1 ~ song,data=data)
anova(model)
model=lm(lyrmod_S2_ROI2 ~ song,data=data)
anova(model)
##for plotting ANOVA values - change y = ...
#require(ggplot2)
ggplot(data, aes(x=song , y=lyrmod_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
## oldnew ANOVA
model=lm(oldnew_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(oldnew_S1_ROI2 ~ song,data=data)
anova(model)
model=lm(oldnew_S1_ROI3 ~ song,data=data)
anova(model)
model=lm(oldnew_S2_ROI1 ~ song,data=data)
anova(model)
model=lm(oldnew_S2_ROI2 ~ song,data=data)
anova(model)
##for plotting ANOVA values - change y = ...
#require(ggplot2)
ggplot(data, aes(x=song , y=oldnew_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
model=lm(fam_S1_ROI1 ~ song*familiarity,data=data)
aov(fam_S1_ROI1 ~ song,data=data)
model=lm(fam_S1_ROI1 ~ song,data=data)
anova(model)
aov(fam_S1_ROI1 ~ song*familiarity,data=data)
model=lm(fam_S1_ROI1 ~ song,data=data)
anova(model)
model=lm(fam_S1_ROI1 ~ song*familiarity,data=data)
anova(model)
model=lm(fam_S1_ROI1 ~ song*familiarity,data=data)
anova(model)
model=lm(fam_S1_ROI2 ~ song*familiarity,data=data)
anova(model)
model=lm(fam_S1_ROI3 ~ song*familiarity,data=data)
anova(model)
model=lm(fam_S2_ROI1 ~ song*familiarity,data=data)
anova(model)
model=lm(fam_S2_ROI2 ~ song*familiarity,data=data)
anova(model)
ggplot(data, aes(x=song , y=fam_S2_ROI1)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
##for plotting ANOVA values - change y = ...
#require(ggplot2)
ggplot(data, aes(x=song , y=fam_S2_ROI2)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("song") +
ylab("activation")
model=lm(lyror_S1_ROI1 ~ song*lyror,data=data)
anova(model)
model=lm(lyror_S1_ROI2 ~ song*lyror,data=data)
anova(model)
model=lm(lyror_S1_ROI3 ~ song*lyror,data=data)
anova(model)
model=lm(lyror_S2_ROI1 ~ song*lyror,data=data)
anova(model)
model=lm(lyror_S2_ROI2 ~ song*lyror,data=data)
anova(model)
model=lm(melmem_S1_ROI1 ~ song*melmem,data=data)
anova(model)
model=lm(melmem_S1_ROI2 ~ song*melmem,data=data)
anova(model)
model=lm(melmem_S2_ROI1 ~ song*melmem,data=data)
anova(model)
model=lm(melmem_S2_ROI2 ~ song*melmem,data=data)
anova(model)
model=lm(beatper_S1_ROI1 ~ song*beatper,data=data)
anova(model)
model=lm(beatper_S1_ROI2 ~ song*beatper,data=data)
anova(model)
model=lm(beatper_S2_ROI1 ~ song*beatper,data=data)
anova(model)
model=lm(beatper_S2_ROI2 ~ song*beatper,data=data)
anova(model)
model=lm(beatper_S2_ROI3 ~ song*beatper,data=data)
anova(model)
model=lm(beatper_S2_ROI4 ~ song*beatper,data=data)
anova(model)
model=lm(lyrmod_S1_ROI1 ~ song*lyrmod,data=data)
anova(model)
model=lm(lyrmod_S1_ROI2 ~ song*lyrmod,data=data)
anova(model)
model=lm(lyrmod_S1_ROI3 ~ song*lyrmod,data=data)
anova(model)
model=lm(lyrmod_S1_ROI4 ~ song*lyrmod,data=data)
anova(model)
model=lm(lyrmod_S2_ROI1 ~ song*lyrmod,data=data)
anova(model)
model=lm(lyrmod_S2_ROI2 ~ song*lyrmod,data=data)
anova(model)
model=lm(oldnew_S1_ROI1 ~ song*oldnew,data=data)
anova(model)
model=lm(oldnew_S1_ROI2 ~ song*oldnew,data=data)
anova(model)
model=lm(oldnew_S1_ROI3 ~ song*oldnew,data=data)
anova(model)
model=lm(oldnew_S2_ROI1 ~ song*oldnew,data=data)
anova(model)
model=lm(oldnew_S2_ROI2 ~ song*oldnew,data=data)
anova(model)
model=lm(melmem_S1_ROI1 ~ song*melmem,data=data) # SIG effect of melmem
anova(model)
model=lm(melmem_S1_ROI2 ~ song*melmem,data=data) # SIG effect of melmem
anova(model)
model=lm(melmem_S2_ROI1 ~ song*melmem,data=data)
anova(model)
model=lm(melmem_S2_ROI2 ~ song*melmem,data=data)
anova(model)
model=lm(fam_S2_ROI1 ~ song*familiarity,data=data) #SIG main effect of familiarity
anova(model)
model=lm(fam_S2_ROI2 ~ song*familiarity,data=data) # SIG main effect of familiarity
anova(model)
model=lm(lyrmod_S1_ROI3 ~ song*lyrmod,data=data)
anova(model)
library("Hmisc")
covariates<-na.omit(data[c(3:8)])
covcor<-rcorr(as.matrix(covariates))
covcor
View(covariates)
View(covariates)
=======
data<-read.table(fname, sep=",",header=FALSE)
data
df=data;
ggplot(df, aes(x = time, y = LB_FR, color = Origin)) +
geom_point(position = position_dodge(width = 0.4))
data
plot(data$V1)
plot(data)
fname <-"file:///C:/Users/asternin/Documents/PhDProject.git/Music and Memory/BehaviouralResults/LyricMod.csv"
#fname<-"~/Documents/Western/Academics/PhDProject.git/Music and Memory/fMRI analysis/CovData.csv"
data<-read.table(fname, sep=",",header=FALSE)
plot(data$V1,data$V2)
abline(fit<-lm(data$V2~data~V1))
abline(fit<-lm(data$V2~data~V1))
abline(fit<-lm(data$V2~data$V1))
plot(data$V1,data$V2, x="lab session" y="lyric modification score")
abline(fit<-lm(data$V2~data$V1))
plot(data$V1,data$V2, xlab="lab session" ylab="lyric modification score")
abline(fit<-lm(data$V2~data$V1))
plot(data$V1,data$V2, xlab="lab session", ylab="lyric modification score")
abline(fit<-lm(data$V2~data$V1))
data$label=factor(data$V1, levels 1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
plot(data$label,data$V2, xlab="lab session", ylab="lyric modification score")
abline(fit<-lm(data$V2~data$V1))
data$label=factor(data$V1, levels 1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
data$label=factor(data$V1, levels = 1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
labels=factor(data$V1, levels = 1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
labels=factor(labels, levels = 1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
data$V1=factor(data$V1, levels = 1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
data$V1=factor(data$V1, levels=1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
dat = data.frame(
label = sample(c(1, 2, 3), 150, replace = TRUE),
val = rgamma(150, 50)
)
dat
boxplot(dat$val ~ dat$label)
dat$label = factor(
dat$label, levels = 1:3,
labels = c("First", "Second", "Third")
)
boxplot(dat$val ~ dat$label)
data=data.frame(data)
data$V1=factor(data$V1, levels=1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
data$V1=factor(as.factor(data$V1), levels=1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
as.factor(data$V1)
data$V1=factor(as.factor(data$V1), labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
dat
data=data.frame(label=data$V1,val=data$V2)
data$label=factor(data$label, levels=1:6, labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2"))
data
data<-read.table(fname, sep=",",header=FALSE)
data=na.omit(data)
data=data.frame(label=data$V1,val=data$V2)
data$label=factor(data$label, levels=1:6,
labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2")
)
data$label=factor(data$label, levels=1:3,
labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2")
)
data$label=factor(data$label, levels=1:6,
labels=c("pre-scan1", "lab", "lab", "lab", "lab", "post-scan2")
)
data
dat
data
data=dat
dat$label = factor(
dat$label, levels = 1:3,
labels = c("First", "Second", "Third")
)
data
data<-read.table(fname, sep=",",header=FALSE)
data=na.omit(data)
dat=data
dat
dat$label = factor(
dat$label, levels = 1:3,
labels = c("First", "Second", "Third")
)
data<-read.table(fname, sep=",",header=FALSE)
data=na.omit(data)
data$V1=factor(data$V1)
data
data$V1
data$V1=factor(data$V1,
label, levels=1:6,
labels=c("pre-scan1", "lab1", "lab2", "lab3", "lab4", "post-scan2")
)
data$V1=factor(data$V1,
levels=1:6,
labels=c("pre-scan1", "lab1", "lab2", "lab3", "lab4", "post-scan2")
)
plot(data$V1,data$V2, xlab="lab session", ylab="lyric modification score")
abline(fit<-lm(data$V2~data$V1))
data<-read.table(fname, sep=",",header=FALSE)
data=na.omit(data)
data$V1=factor(data$V1,
levels=1:6,
labels=c("pre-scan1", "lab1", "lab2", "lab3", "lab4", "post-scan2")
)
plot(data$V1,data$V2, xlab="lab session", ylab="lyric modification score")
abline(fit<-lm(data$V2~data$V1))
plot(data$V1,data$V2)
plot(data$V1,data$V2)
plot(data$V1,data$V2)
plot(data$V1)
plot(data$V1,data$V2, xlab="lab session", ylab="lyric modification score")
>>>>>>> 2b09bee41847d8da0270edb289826c46d92d60c3
